<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>起点</title>
    <url>/2022/06/27/%E8%B5%B7%E7%82%B9/</url>
    <content><![CDATA[<p>要来咯！～</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript简单排序</title>
    <url>/2022/06/27/Typescript%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<ol>
<li>利用<code>nodemon</code>和<code>concurrently</code>编译并执行ts的demo <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json - scripts</span></span><br><span class="line"> <span class="string">&quot;start:build&quot;</span>: <span class="string">&quot;tsc -w&quot;</span>,</span><br><span class="line">	<span class="string">&quot;start:run&quot;</span>: <span class="string">&quot;nodemon build/index.js&quot;</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;concurrently npm:start:*&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>类型保护<ul>
<li>原始值<code>number</code> <code>string</code> <code>boolean</code> <code>symbol</code>使用<code>typeof</code>判断类型</li>
<li>其他类型使用<code>instanceof</code>判断</li>
</ul>
</li>
<li>简单链表</li>
<li>接口和抽象类的使用和异同</li>
</ol>
<span id="more"></span>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sorter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">collection</span>: <span class="built_in">number</span>[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">collection: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">collection</span> = collection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public constructor(public collection: number[]) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">sort</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// const length = this.collection.length;</span></span><br><span class="line">    <span class="keyword">const</span> &#123; length &#125; = <span class="variable language_">this</span>.<span class="property">collection</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">collection</span>[j] &gt; <span class="variable language_">this</span>.<span class="property">collection</span>[j + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">const</span> leftHand = <span class="variable language_">this</span>.<span class="property">collection</span>[j];</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">collection</span>[j] = <span class="variable language_">this</span>.<span class="property">collection</span>[j + <span class="number">1</span>];</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">collection</span>[j + <span class="number">1</span>] = leftHand;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sorter = <span class="keyword">new</span> <span class="title class_">Sorter</span>([<span class="number">1</span>, -<span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>]);</span><br><span class="line">sorter.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sorter.<span class="property">collection</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完整版本</span></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Sorter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Sorter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NumbersCollection</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./NumbersCollection&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CharacterCollection</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./CharactersCollection&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LinkedList</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./LinkedList&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbersList = <span class="keyword">new</span> <span class="title class_">NumbersCollection</span>([<span class="number">1</span>, <span class="number">4</span>, -<span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> characters = <span class="keyword">new</span> <span class="title class_">CharacterCollection</span>(<span class="string">&quot;nishino&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> linkList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">linkList.<span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line">linkList.<span class="title function_">add</span>(-<span class="number">3</span>);</span><br><span class="line">linkList.<span class="title function_">add</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 抽象类后无法创建实例</span></span><br><span class="line"><span class="comment">// const sorter = new Sorter(linkList);</span></span><br><span class="line"><span class="comment">// sorter.sort();</span></span><br><span class="line"><span class="comment">// console.log(sorter.collection);</span></span><br><span class="line">linkList.<span class="title function_">print</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sorter.ts</span></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sortable</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">compare</span>: <span class="function">(<span class="params">leftIndex: <span class="built_in">number</span>, rightIndex: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">swap</span>: <span class="function">(<span class="params">leftIndex: <span class="built_in">number</span>, rightIndex: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Sorter</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sort</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; length &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">compare</span>(j, j + <span class="number">1</span>)) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">swap</span>(j, j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">compare</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">right</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">swap</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">rightIndex</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NumbersCollection.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Sorter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Sorter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NumbersCollection</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Sorter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> data: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compare</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">rightIndex</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>[leftIndex] &gt; <span class="variable language_">this</span>.<span class="property">data</span>[rightIndex];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">swap</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">rightIndex</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> leftHand = <span class="variable language_">this</span>.<span class="property">data</span>[leftIndex];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>[leftIndex] = <span class="variable language_">this</span>.<span class="property">data</span>[rightIndex];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>[rightIndex] = leftHand;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CharactersCollection.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Sorter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Sorter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CharacterCollection</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Sorter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compare</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">rightIndex</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>[leftIndex].<span class="title function_">toLocaleLowerCase</span>() &gt;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>[rightIndex].<span class="title function_">toLocaleLowerCase</span>()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">swap</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">rightIndex</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> characters = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> leftHand = characters[leftIndex];</span><br><span class="line">    characters[leftIndex] = characters[rightIndex];</span><br><span class="line">    characters[rightIndex] = leftHand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = characters.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LinkedList.ts 链表</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Sorter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Sorter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> data: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Sorter</span> &#123;</span><br><span class="line">  <span class="attr">head</span>: <span class="title class_">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="attr">data</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tail = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (tail.<span class="property">next</span>) &#123;</span><br><span class="line">      tail = tail.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tail.<span class="property">next</span> = node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="property">next</span>) &#123;</span><br><span class="line">      length++;</span><br><span class="line">      node = node.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">at</span>(<span class="attr">index</span>: <span class="built_in">number</span>): <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Index out of the bounds&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">node</span>: <span class="title class_">Node</span> | <span class="literal">null</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">      <span class="keyword">if</span> (counter === index) &#123;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      counter++;</span><br><span class="line">      node = node.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Index out of the bounds&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">compare</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">rightIndex</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;List is empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">at</span>(leftIndex).<span class="property">data</span> &gt; <span class="variable language_">this</span>.<span class="title function_">at</span>(rightIndex).<span class="property">data</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">swap</span>(<span class="attr">leftIndex</span>: <span class="built_in">number</span>, <span class="attr">rightIndex</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> leftNode = <span class="variable language_">this</span>.<span class="title function_">at</span>(leftIndex);</span><br><span class="line">    <span class="keyword">const</span> rightNode = <span class="variable language_">this</span>.<span class="title function_">at</span>(rightIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> leftHand = leftNode.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    leftNode.<span class="property">data</span> = rightNode.<span class="property">data</span>;</span><br><span class="line">    rightNode.<span class="property">data</span> = leftHand;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">head</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">node</span>: <span class="title class_">Node</span> | <span class="literal">null</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(node);</span><br><span class="line">      node = node.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>代码</tag>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2022/06/27/about/</url>
    <content><![CDATA[<blockquote>
<p>🤔</p>
</blockquote>
<p>姓名：聂浩<br>现居：重庆<br>GitHub: <a href="https://github.com/a1501255708">NieHao</a><br>QQ: 1501255708<br>微信: a1501255708</p>
<span id="more"></span>]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
